// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lysand-org/versia-go/ent/image"
	"github.com/lysand-org/versia-go/ent/instancemetadata"
	"github.com/lysand-org/versia-go/ent/note"
	"github.com/lysand-org/versia-go/ent/predicate"
	"github.com/lysand-org/versia-go/ent/user"
	"github.com/lysand-org/versia-go/pkg/versia"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetIsRemote sets the "isRemote" field.
func (uu *UserUpdate) SetIsRemote(b bool) *UserUpdate {
	uu.mutation.SetIsRemote(b)
	return uu
}

// SetNillableIsRemote sets the "isRemote" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsRemote(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsRemote(*b)
	}
	return uu
}

// SetURI sets the "uri" field.
func (uu *UserUpdate) SetURI(s string) *UserUpdate {
	uu.mutation.SetURI(s)
	return uu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (uu *UserUpdate) SetNillableURI(s *string) *UserUpdate {
	if s != nil {
		uu.SetURI(*s)
	}
	return uu
}

// SetExtensions sets the "extensions" field.
func (uu *UserUpdate) SetExtensions(v versia.Extensions) *UserUpdate {
	uu.mutation.SetExtensions(v)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsername(*s)
	}
	return uu
}

// SetPasswordHash sets the "passwordHash" field.
func (uu *UserUpdate) SetPasswordHash(b []byte) *UserUpdate {
	uu.mutation.SetPasswordHash(b)
	return uu
}

// ClearPasswordHash clears the value of the "passwordHash" field.
func (uu *UserUpdate) ClearPasswordHash() *UserUpdate {
	uu.mutation.ClearPasswordHash()
	return uu
}

// SetDisplayName sets the "displayName" field.
func (uu *UserUpdate) SetDisplayName(s string) *UserUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetNillableDisplayName sets the "displayName" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDisplayName(s *string) *UserUpdate {
	if s != nil {
		uu.SetDisplayName(*s)
	}
	return uu
}

// ClearDisplayName clears the value of the "displayName" field.
func (uu *UserUpdate) ClearDisplayName() *UserUpdate {
	uu.mutation.ClearDisplayName()
	return uu
}

// SetBiography sets the "biography" field.
func (uu *UserUpdate) SetBiography(s string) *UserUpdate {
	uu.mutation.SetBiography(s)
	return uu
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (uu *UserUpdate) SetNillableBiography(s *string) *UserUpdate {
	if s != nil {
		uu.SetBiography(*s)
	}
	return uu
}

// ClearBiography clears the value of the "biography" field.
func (uu *UserUpdate) ClearBiography() *UserUpdate {
	uu.mutation.ClearBiography()
	return uu
}

// SetPublicKey sets the "publicKey" field.
func (uu *UserUpdate) SetPublicKey(b []byte) *UserUpdate {
	uu.mutation.SetPublicKey(b)
	return uu
}

// SetPublicKeyActor sets the "publicKeyActor" field.
func (uu *UserUpdate) SetPublicKeyActor(s string) *UserUpdate {
	uu.mutation.SetPublicKeyActor(s)
	return uu
}

// SetNillablePublicKeyActor sets the "publicKeyActor" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePublicKeyActor(s *string) *UserUpdate {
	if s != nil {
		uu.SetPublicKeyActor(*s)
	}
	return uu
}

// SetPublicKeyAlgorithm sets the "publicKeyAlgorithm" field.
func (uu *UserUpdate) SetPublicKeyAlgorithm(s string) *UserUpdate {
	uu.mutation.SetPublicKeyAlgorithm(s)
	return uu
}

// SetNillablePublicKeyAlgorithm sets the "publicKeyAlgorithm" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePublicKeyAlgorithm(s *string) *UserUpdate {
	if s != nil {
		uu.SetPublicKeyAlgorithm(*s)
	}
	return uu
}

// SetPrivateKey sets the "privateKey" field.
func (uu *UserUpdate) SetPrivateKey(b []byte) *UserUpdate {
	uu.mutation.SetPrivateKey(b)
	return uu
}

// ClearPrivateKey clears the value of the "privateKey" field.
func (uu *UserUpdate) ClearPrivateKey() *UserUpdate {
	uu.mutation.ClearPrivateKey()
	return uu
}

// SetIndexable sets the "indexable" field.
func (uu *UserUpdate) SetIndexable(b bool) *UserUpdate {
	uu.mutation.SetIndexable(b)
	return uu
}

// SetNillableIndexable sets the "indexable" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIndexable(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIndexable(*b)
	}
	return uu
}

// SetPrivacyLevel sets the "privacyLevel" field.
func (uu *UserUpdate) SetPrivacyLevel(ul user.PrivacyLevel) *UserUpdate {
	uu.mutation.SetPrivacyLevel(ul)
	return uu
}

// SetNillablePrivacyLevel sets the "privacyLevel" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePrivacyLevel(ul *user.PrivacyLevel) *UserUpdate {
	if ul != nil {
		uu.SetPrivacyLevel(*ul)
	}
	return uu
}

// SetFields sets the "fields" field.
func (uu *UserUpdate) SetFields(vf []versia.UserField) *UserUpdate {
	uu.mutation.SetFields(vf)
	return uu
}

// AppendFields appends vf to the "fields" field.
func (uu *UserUpdate) AppendFields(vf []versia.UserField) *UserUpdate {
	uu.mutation.AppendFields(vf)
	return uu
}

// SetInbox sets the "inbox" field.
func (uu *UserUpdate) SetInbox(s string) *UserUpdate {
	uu.mutation.SetInbox(s)
	return uu
}

// SetNillableInbox sets the "inbox" field if the given value is not nil.
func (uu *UserUpdate) SetNillableInbox(s *string) *UserUpdate {
	if s != nil {
		uu.SetInbox(*s)
	}
	return uu
}

// SetFeatured sets the "featured" field.
func (uu *UserUpdate) SetFeatured(s string) *UserUpdate {
	uu.mutation.SetFeatured(s)
	return uu
}

// SetNillableFeatured sets the "featured" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFeatured(s *string) *UserUpdate {
	if s != nil {
		uu.SetFeatured(*s)
	}
	return uu
}

// SetFollowers sets the "followers" field.
func (uu *UserUpdate) SetFollowers(s string) *UserUpdate {
	uu.mutation.SetFollowers(s)
	return uu
}

// SetNillableFollowers sets the "followers" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFollowers(s *string) *UserUpdate {
	if s != nil {
		uu.SetFollowers(*s)
	}
	return uu
}

// SetFollowing sets the "following" field.
func (uu *UserUpdate) SetFollowing(s string) *UserUpdate {
	uu.mutation.SetFollowing(s)
	return uu
}

// SetNillableFollowing sets the "following" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFollowing(s *string) *UserUpdate {
	if s != nil {
		uu.SetFollowing(*s)
	}
	return uu
}

// SetOutbox sets the "outbox" field.
func (uu *UserUpdate) SetOutbox(s string) *UserUpdate {
	uu.mutation.SetOutbox(s)
	return uu
}

// SetNillableOutbox sets the "outbox" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOutbox(s *string) *UserUpdate {
	if s != nil {
		uu.SetOutbox(*s)
	}
	return uu
}

// SetAvatarImageID sets the "avatarImage" edge to the Image entity by ID.
func (uu *UserUpdate) SetAvatarImageID(id int) *UserUpdate {
	uu.mutation.SetAvatarImageID(id)
	return uu
}

// SetNillableAvatarImageID sets the "avatarImage" edge to the Image entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarImageID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetAvatarImageID(*id)
	}
	return uu
}

// SetAvatarImage sets the "avatarImage" edge to the Image entity.
func (uu *UserUpdate) SetAvatarImage(i *Image) *UserUpdate {
	return uu.SetAvatarImageID(i.ID)
}

// SetHeaderImageID sets the "headerImage" edge to the Image entity by ID.
func (uu *UserUpdate) SetHeaderImageID(id int) *UserUpdate {
	uu.mutation.SetHeaderImageID(id)
	return uu
}

// SetNillableHeaderImageID sets the "headerImage" edge to the Image entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableHeaderImageID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetHeaderImageID(*id)
	}
	return uu
}

// SetHeaderImage sets the "headerImage" edge to the Image entity.
func (uu *UserUpdate) SetHeaderImage(i *Image) *UserUpdate {
	return uu.SetHeaderImageID(i.ID)
}

// AddAuthoredNoteIDs adds the "authoredNotes" edge to the Note entity by IDs.
func (uu *UserUpdate) AddAuthoredNoteIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddAuthoredNoteIDs(ids...)
	return uu
}

// AddAuthoredNotes adds the "authoredNotes" edges to the Note entity.
func (uu *UserUpdate) AddAuthoredNotes(n ...*Note) *UserUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddAuthoredNoteIDs(ids...)
}

// AddMentionedNoteIDs adds the "mentionedNotes" edge to the Note entity by IDs.
func (uu *UserUpdate) AddMentionedNoteIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddMentionedNoteIDs(ids...)
	return uu
}

// AddMentionedNotes adds the "mentionedNotes" edges to the Note entity.
func (uu *UserUpdate) AddMentionedNotes(n ...*Note) *UserUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.AddMentionedNoteIDs(ids...)
}

// AddServerIDs adds the "servers" edge to the InstanceMetadata entity by IDs.
func (uu *UserUpdate) AddServerIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddServerIDs(ids...)
	return uu
}

// AddServers adds the "servers" edges to the InstanceMetadata entity.
func (uu *UserUpdate) AddServers(i ...*InstanceMetadata) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddServerIDs(ids...)
}

// AddModeratedServerIDs adds the "moderatedServers" edge to the InstanceMetadata entity by IDs.
func (uu *UserUpdate) AddModeratedServerIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddModeratedServerIDs(ids...)
	return uu
}

// AddModeratedServers adds the "moderatedServers" edges to the InstanceMetadata entity.
func (uu *UserUpdate) AddModeratedServers(i ...*InstanceMetadata) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddModeratedServerIDs(ids...)
}

// AddAdministeredServerIDs adds the "administeredServers" edge to the InstanceMetadata entity by IDs.
func (uu *UserUpdate) AddAdministeredServerIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddAdministeredServerIDs(ids...)
	return uu
}

// AddAdministeredServers adds the "administeredServers" edges to the InstanceMetadata entity.
func (uu *UserUpdate) AddAdministeredServers(i ...*InstanceMetadata) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.AddAdministeredServerIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearAvatarImage clears the "avatarImage" edge to the Image entity.
func (uu *UserUpdate) ClearAvatarImage() *UserUpdate {
	uu.mutation.ClearAvatarImage()
	return uu
}

// ClearHeaderImage clears the "headerImage" edge to the Image entity.
func (uu *UserUpdate) ClearHeaderImage() *UserUpdate {
	uu.mutation.ClearHeaderImage()
	return uu
}

// ClearAuthoredNotes clears all "authoredNotes" edges to the Note entity.
func (uu *UserUpdate) ClearAuthoredNotes() *UserUpdate {
	uu.mutation.ClearAuthoredNotes()
	return uu
}

// RemoveAuthoredNoteIDs removes the "authoredNotes" edge to Note entities by IDs.
func (uu *UserUpdate) RemoveAuthoredNoteIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveAuthoredNoteIDs(ids...)
	return uu
}

// RemoveAuthoredNotes removes "authoredNotes" edges to Note entities.
func (uu *UserUpdate) RemoveAuthoredNotes(n ...*Note) *UserUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveAuthoredNoteIDs(ids...)
}

// ClearMentionedNotes clears all "mentionedNotes" edges to the Note entity.
func (uu *UserUpdate) ClearMentionedNotes() *UserUpdate {
	uu.mutation.ClearMentionedNotes()
	return uu
}

// RemoveMentionedNoteIDs removes the "mentionedNotes" edge to Note entities by IDs.
func (uu *UserUpdate) RemoveMentionedNoteIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveMentionedNoteIDs(ids...)
	return uu
}

// RemoveMentionedNotes removes "mentionedNotes" edges to Note entities.
func (uu *UserUpdate) RemoveMentionedNotes(n ...*Note) *UserUpdate {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uu.RemoveMentionedNoteIDs(ids...)
}

// ClearServers clears all "servers" edges to the InstanceMetadata entity.
func (uu *UserUpdate) ClearServers() *UserUpdate {
	uu.mutation.ClearServers()
	return uu
}

// RemoveServerIDs removes the "servers" edge to InstanceMetadata entities by IDs.
func (uu *UserUpdate) RemoveServerIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveServerIDs(ids...)
	return uu
}

// RemoveServers removes "servers" edges to InstanceMetadata entities.
func (uu *UserUpdate) RemoveServers(i ...*InstanceMetadata) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveServerIDs(ids...)
}

// ClearModeratedServers clears all "moderatedServers" edges to the InstanceMetadata entity.
func (uu *UserUpdate) ClearModeratedServers() *UserUpdate {
	uu.mutation.ClearModeratedServers()
	return uu
}

// RemoveModeratedServerIDs removes the "moderatedServers" edge to InstanceMetadata entities by IDs.
func (uu *UserUpdate) RemoveModeratedServerIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveModeratedServerIDs(ids...)
	return uu
}

// RemoveModeratedServers removes "moderatedServers" edges to InstanceMetadata entities.
func (uu *UserUpdate) RemoveModeratedServers(i ...*InstanceMetadata) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveModeratedServerIDs(ids...)
}

// ClearAdministeredServers clears all "administeredServers" edges to the InstanceMetadata entity.
func (uu *UserUpdate) ClearAdministeredServers() *UserUpdate {
	uu.mutation.ClearAdministeredServers()
	return uu
}

// RemoveAdministeredServerIDs removes the "administeredServers" edge to InstanceMetadata entities by IDs.
func (uu *UserUpdate) RemoveAdministeredServerIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveAdministeredServerIDs(ids...)
	return uu
}

// RemoveAdministeredServers removes "administeredServers" edges to InstanceMetadata entities.
func (uu *UserUpdate) RemoveAdministeredServers(i ...*InstanceMetadata) *UserUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uu.RemoveAdministeredServerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.URI(); ok {
		if err := user.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "User.uri": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.DisplayName(); ok {
		if err := user.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "displayName", err: fmt.Errorf(`ent: validator failed for field "User.displayName": %w`, err)}
		}
	}
	if v, ok := uu.mutation.PrivacyLevel(); ok {
		if err := user.PrivacyLevelValidator(v); err != nil {
			return &ValidationError{Name: "privacyLevel", err: fmt.Errorf(`ent: validator failed for field "User.privacyLevel": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Inbox(); ok {
		if err := user.InboxValidator(v); err != nil {
			return &ValidationError{Name: "inbox", err: fmt.Errorf(`ent: validator failed for field "User.inbox": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Featured(); ok {
		if err := user.FeaturedValidator(v); err != nil {
			return &ValidationError{Name: "featured", err: fmt.Errorf(`ent: validator failed for field "User.featured": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Followers(); ok {
		if err := user.FollowersValidator(v); err != nil {
			return &ValidationError{Name: "followers", err: fmt.Errorf(`ent: validator failed for field "User.followers": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Following(); ok {
		if err := user.FollowingValidator(v); err != nil {
			return &ValidationError{Name: "following", err: fmt.Errorf(`ent: validator failed for field "User.following": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Outbox(); ok {
		if err := user.OutboxValidator(v); err != nil {
			return &ValidationError{Name: "outbox", err: fmt.Errorf(`ent: validator failed for field "User.outbox": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.IsRemote(); ok {
		_spec.SetField(user.FieldIsRemote, field.TypeBool, value)
	}
	if value, ok := uu.mutation.URI(); ok {
		_spec.SetField(user.FieldURI, field.TypeString, value)
	}
	if value, ok := uu.mutation.Extensions(); ok {
		_spec.SetField(user.FieldExtensions, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeBytes, value)
	}
	if uu.mutation.PasswordHashCleared() {
		_spec.ClearField(user.FieldPasswordHash, field.TypeBytes)
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if uu.mutation.DisplayNameCleared() {
		_spec.ClearField(user.FieldDisplayName, field.TypeString)
	}
	if value, ok := uu.mutation.Biography(); ok {
		_spec.SetField(user.FieldBiography, field.TypeString, value)
	}
	if uu.mutation.BiographyCleared() {
		_spec.ClearField(user.FieldBiography, field.TypeString)
	}
	if value, ok := uu.mutation.PublicKey(); ok {
		_spec.SetField(user.FieldPublicKey, field.TypeBytes, value)
	}
	if value, ok := uu.mutation.PublicKeyActor(); ok {
		_spec.SetField(user.FieldPublicKeyActor, field.TypeString, value)
	}
	if value, ok := uu.mutation.PublicKeyAlgorithm(); ok {
		_spec.SetField(user.FieldPublicKeyAlgorithm, field.TypeString, value)
	}
	if value, ok := uu.mutation.PrivateKey(); ok {
		_spec.SetField(user.FieldPrivateKey, field.TypeBytes, value)
	}
	if uu.mutation.PrivateKeyCleared() {
		_spec.ClearField(user.FieldPrivateKey, field.TypeBytes)
	}
	if value, ok := uu.mutation.Indexable(); ok {
		_spec.SetField(user.FieldIndexable, field.TypeBool, value)
	}
	if value, ok := uu.mutation.PrivacyLevel(); ok {
		_spec.SetField(user.FieldPrivacyLevel, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.GetFields(); ok {
		_spec.SetField(user.FieldFields, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedFields(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldFields, value)
		})
	}
	if value, ok := uu.mutation.Inbox(); ok {
		_spec.SetField(user.FieldInbox, field.TypeString, value)
	}
	if value, ok := uu.mutation.Featured(); ok {
		_spec.SetField(user.FieldFeatured, field.TypeString, value)
	}
	if value, ok := uu.mutation.Followers(); ok {
		_spec.SetField(user.FieldFollowers, field.TypeString, value)
	}
	if value, ok := uu.mutation.Following(); ok {
		_spec.SetField(user.FieldFollowing, field.TypeString, value)
	}
	if value, ok := uu.mutation.Outbox(); ok {
		_spec.SetField(user.FieldOutbox, field.TypeString, value)
	}
	if uu.mutation.AvatarImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.AvatarImageTable,
			Columns: []string{user.AvatarImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AvatarImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.AvatarImageTable,
			Columns: []string{user.AvatarImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.HeaderImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.HeaderImageTable,
			Columns: []string{user.HeaderImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.HeaderImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.HeaderImageTable,
			Columns: []string{user.HeaderImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AuthoredNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.AuthoredNotesTable,
			Columns: []string{user.AuthoredNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAuthoredNotesIDs(); len(nodes) > 0 && !uu.mutation.AuthoredNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.AuthoredNotesTable,
			Columns: []string{user.AuthoredNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AuthoredNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.AuthoredNotesTable,
			Columns: []string{user.AuthoredNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MentionedNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MentionedNotesTable,
			Columns: user.MentionedNotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedMentionedNotesIDs(); len(nodes) > 0 && !uu.mutation.MentionedNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MentionedNotesTable,
			Columns: user.MentionedNotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MentionedNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MentionedNotesTable,
			Columns: user.MentionedNotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedServersIDs(); len(nodes) > 0 && !uu.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ModeratedServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratedServersTable,
			Columns: user.ModeratedServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedModeratedServersIDs(); len(nodes) > 0 && !uu.mutation.ModeratedServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratedServersTable,
			Columns: user.ModeratedServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ModeratedServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratedServersTable,
			Columns: user.ModeratedServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AdministeredServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdministeredServersTable,
			Columns: user.AdministeredServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAdministeredServersIDs(); len(nodes) > 0 && !uu.mutation.AdministeredServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdministeredServersTable,
			Columns: user.AdministeredServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AdministeredServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdministeredServersTable,
			Columns: user.AdministeredServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetIsRemote sets the "isRemote" field.
func (uuo *UserUpdateOne) SetIsRemote(b bool) *UserUpdateOne {
	uuo.mutation.SetIsRemote(b)
	return uuo
}

// SetNillableIsRemote sets the "isRemote" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsRemote(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsRemote(*b)
	}
	return uuo
}

// SetURI sets the "uri" field.
func (uuo *UserUpdateOne) SetURI(s string) *UserUpdateOne {
	uuo.mutation.SetURI(s)
	return uuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableURI(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetURI(*s)
	}
	return uuo
}

// SetExtensions sets the "extensions" field.
func (uuo *UserUpdateOne) SetExtensions(v versia.Extensions) *UserUpdateOne {
	uuo.mutation.SetExtensions(v)
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsername(*s)
	}
	return uuo
}

// SetPasswordHash sets the "passwordHash" field.
func (uuo *UserUpdateOne) SetPasswordHash(b []byte) *UserUpdateOne {
	uuo.mutation.SetPasswordHash(b)
	return uuo
}

// ClearPasswordHash clears the value of the "passwordHash" field.
func (uuo *UserUpdateOne) ClearPasswordHash() *UserUpdateOne {
	uuo.mutation.ClearPasswordHash()
	return uuo
}

// SetDisplayName sets the "displayName" field.
func (uuo *UserUpdateOne) SetDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetNillableDisplayName sets the "displayName" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDisplayName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDisplayName(*s)
	}
	return uuo
}

// ClearDisplayName clears the value of the "displayName" field.
func (uuo *UserUpdateOne) ClearDisplayName() *UserUpdateOne {
	uuo.mutation.ClearDisplayName()
	return uuo
}

// SetBiography sets the "biography" field.
func (uuo *UserUpdateOne) SetBiography(s string) *UserUpdateOne {
	uuo.mutation.SetBiography(s)
	return uuo
}

// SetNillableBiography sets the "biography" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableBiography(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetBiography(*s)
	}
	return uuo
}

// ClearBiography clears the value of the "biography" field.
func (uuo *UserUpdateOne) ClearBiography() *UserUpdateOne {
	uuo.mutation.ClearBiography()
	return uuo
}

// SetPublicKey sets the "publicKey" field.
func (uuo *UserUpdateOne) SetPublicKey(b []byte) *UserUpdateOne {
	uuo.mutation.SetPublicKey(b)
	return uuo
}

// SetPublicKeyActor sets the "publicKeyActor" field.
func (uuo *UserUpdateOne) SetPublicKeyActor(s string) *UserUpdateOne {
	uuo.mutation.SetPublicKeyActor(s)
	return uuo
}

// SetNillablePublicKeyActor sets the "publicKeyActor" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePublicKeyActor(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPublicKeyActor(*s)
	}
	return uuo
}

// SetPublicKeyAlgorithm sets the "publicKeyAlgorithm" field.
func (uuo *UserUpdateOne) SetPublicKeyAlgorithm(s string) *UserUpdateOne {
	uuo.mutation.SetPublicKeyAlgorithm(s)
	return uuo
}

// SetNillablePublicKeyAlgorithm sets the "publicKeyAlgorithm" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePublicKeyAlgorithm(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPublicKeyAlgorithm(*s)
	}
	return uuo
}

// SetPrivateKey sets the "privateKey" field.
func (uuo *UserUpdateOne) SetPrivateKey(b []byte) *UserUpdateOne {
	uuo.mutation.SetPrivateKey(b)
	return uuo
}

// ClearPrivateKey clears the value of the "privateKey" field.
func (uuo *UserUpdateOne) ClearPrivateKey() *UserUpdateOne {
	uuo.mutation.ClearPrivateKey()
	return uuo
}

// SetIndexable sets the "indexable" field.
func (uuo *UserUpdateOne) SetIndexable(b bool) *UserUpdateOne {
	uuo.mutation.SetIndexable(b)
	return uuo
}

// SetNillableIndexable sets the "indexable" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIndexable(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIndexable(*b)
	}
	return uuo
}

// SetPrivacyLevel sets the "privacyLevel" field.
func (uuo *UserUpdateOne) SetPrivacyLevel(ul user.PrivacyLevel) *UserUpdateOne {
	uuo.mutation.SetPrivacyLevel(ul)
	return uuo
}

// SetNillablePrivacyLevel sets the "privacyLevel" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePrivacyLevel(ul *user.PrivacyLevel) *UserUpdateOne {
	if ul != nil {
		uuo.SetPrivacyLevel(*ul)
	}
	return uuo
}

// SetFields sets the "fields" field.
func (uuo *UserUpdateOne) SetFields(vf []versia.UserField) *UserUpdateOne {
	uuo.mutation.SetFields(vf)
	return uuo
}

// AppendFields appends vf to the "fields" field.
func (uuo *UserUpdateOne) AppendFields(vf []versia.UserField) *UserUpdateOne {
	uuo.mutation.AppendFields(vf)
	return uuo
}

// SetInbox sets the "inbox" field.
func (uuo *UserUpdateOne) SetInbox(s string) *UserUpdateOne {
	uuo.mutation.SetInbox(s)
	return uuo
}

// SetNillableInbox sets the "inbox" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableInbox(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetInbox(*s)
	}
	return uuo
}

// SetFeatured sets the "featured" field.
func (uuo *UserUpdateOne) SetFeatured(s string) *UserUpdateOne {
	uuo.mutation.SetFeatured(s)
	return uuo
}

// SetNillableFeatured sets the "featured" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFeatured(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFeatured(*s)
	}
	return uuo
}

// SetFollowers sets the "followers" field.
func (uuo *UserUpdateOne) SetFollowers(s string) *UserUpdateOne {
	uuo.mutation.SetFollowers(s)
	return uuo
}

// SetNillableFollowers sets the "followers" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFollowers(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFollowers(*s)
	}
	return uuo
}

// SetFollowing sets the "following" field.
func (uuo *UserUpdateOne) SetFollowing(s string) *UserUpdateOne {
	uuo.mutation.SetFollowing(s)
	return uuo
}

// SetNillableFollowing sets the "following" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFollowing(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFollowing(*s)
	}
	return uuo
}

// SetOutbox sets the "outbox" field.
func (uuo *UserUpdateOne) SetOutbox(s string) *UserUpdateOne {
	uuo.mutation.SetOutbox(s)
	return uuo
}

// SetNillableOutbox sets the "outbox" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOutbox(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOutbox(*s)
	}
	return uuo
}

// SetAvatarImageID sets the "avatarImage" edge to the Image entity by ID.
func (uuo *UserUpdateOne) SetAvatarImageID(id int) *UserUpdateOne {
	uuo.mutation.SetAvatarImageID(id)
	return uuo
}

// SetNillableAvatarImageID sets the "avatarImage" edge to the Image entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarImageID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetAvatarImageID(*id)
	}
	return uuo
}

// SetAvatarImage sets the "avatarImage" edge to the Image entity.
func (uuo *UserUpdateOne) SetAvatarImage(i *Image) *UserUpdateOne {
	return uuo.SetAvatarImageID(i.ID)
}

// SetHeaderImageID sets the "headerImage" edge to the Image entity by ID.
func (uuo *UserUpdateOne) SetHeaderImageID(id int) *UserUpdateOne {
	uuo.mutation.SetHeaderImageID(id)
	return uuo
}

// SetNillableHeaderImageID sets the "headerImage" edge to the Image entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHeaderImageID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetHeaderImageID(*id)
	}
	return uuo
}

// SetHeaderImage sets the "headerImage" edge to the Image entity.
func (uuo *UserUpdateOne) SetHeaderImage(i *Image) *UserUpdateOne {
	return uuo.SetHeaderImageID(i.ID)
}

// AddAuthoredNoteIDs adds the "authoredNotes" edge to the Note entity by IDs.
func (uuo *UserUpdateOne) AddAuthoredNoteIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddAuthoredNoteIDs(ids...)
	return uuo
}

// AddAuthoredNotes adds the "authoredNotes" edges to the Note entity.
func (uuo *UserUpdateOne) AddAuthoredNotes(n ...*Note) *UserUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddAuthoredNoteIDs(ids...)
}

// AddMentionedNoteIDs adds the "mentionedNotes" edge to the Note entity by IDs.
func (uuo *UserUpdateOne) AddMentionedNoteIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddMentionedNoteIDs(ids...)
	return uuo
}

// AddMentionedNotes adds the "mentionedNotes" edges to the Note entity.
func (uuo *UserUpdateOne) AddMentionedNotes(n ...*Note) *UserUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.AddMentionedNoteIDs(ids...)
}

// AddServerIDs adds the "servers" edge to the InstanceMetadata entity by IDs.
func (uuo *UserUpdateOne) AddServerIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddServerIDs(ids...)
	return uuo
}

// AddServers adds the "servers" edges to the InstanceMetadata entity.
func (uuo *UserUpdateOne) AddServers(i ...*InstanceMetadata) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddServerIDs(ids...)
}

// AddModeratedServerIDs adds the "moderatedServers" edge to the InstanceMetadata entity by IDs.
func (uuo *UserUpdateOne) AddModeratedServerIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddModeratedServerIDs(ids...)
	return uuo
}

// AddModeratedServers adds the "moderatedServers" edges to the InstanceMetadata entity.
func (uuo *UserUpdateOne) AddModeratedServers(i ...*InstanceMetadata) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddModeratedServerIDs(ids...)
}

// AddAdministeredServerIDs adds the "administeredServers" edge to the InstanceMetadata entity by IDs.
func (uuo *UserUpdateOne) AddAdministeredServerIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddAdministeredServerIDs(ids...)
	return uuo
}

// AddAdministeredServers adds the "administeredServers" edges to the InstanceMetadata entity.
func (uuo *UserUpdateOne) AddAdministeredServers(i ...*InstanceMetadata) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.AddAdministeredServerIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearAvatarImage clears the "avatarImage" edge to the Image entity.
func (uuo *UserUpdateOne) ClearAvatarImage() *UserUpdateOne {
	uuo.mutation.ClearAvatarImage()
	return uuo
}

// ClearHeaderImage clears the "headerImage" edge to the Image entity.
func (uuo *UserUpdateOne) ClearHeaderImage() *UserUpdateOne {
	uuo.mutation.ClearHeaderImage()
	return uuo
}

// ClearAuthoredNotes clears all "authoredNotes" edges to the Note entity.
func (uuo *UserUpdateOne) ClearAuthoredNotes() *UserUpdateOne {
	uuo.mutation.ClearAuthoredNotes()
	return uuo
}

// RemoveAuthoredNoteIDs removes the "authoredNotes" edge to Note entities by IDs.
func (uuo *UserUpdateOne) RemoveAuthoredNoteIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveAuthoredNoteIDs(ids...)
	return uuo
}

// RemoveAuthoredNotes removes "authoredNotes" edges to Note entities.
func (uuo *UserUpdateOne) RemoveAuthoredNotes(n ...*Note) *UserUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveAuthoredNoteIDs(ids...)
}

// ClearMentionedNotes clears all "mentionedNotes" edges to the Note entity.
func (uuo *UserUpdateOne) ClearMentionedNotes() *UserUpdateOne {
	uuo.mutation.ClearMentionedNotes()
	return uuo
}

// RemoveMentionedNoteIDs removes the "mentionedNotes" edge to Note entities by IDs.
func (uuo *UserUpdateOne) RemoveMentionedNoteIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveMentionedNoteIDs(ids...)
	return uuo
}

// RemoveMentionedNotes removes "mentionedNotes" edges to Note entities.
func (uuo *UserUpdateOne) RemoveMentionedNotes(n ...*Note) *UserUpdateOne {
	ids := make([]uuid.UUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uuo.RemoveMentionedNoteIDs(ids...)
}

// ClearServers clears all "servers" edges to the InstanceMetadata entity.
func (uuo *UserUpdateOne) ClearServers() *UserUpdateOne {
	uuo.mutation.ClearServers()
	return uuo
}

// RemoveServerIDs removes the "servers" edge to InstanceMetadata entities by IDs.
func (uuo *UserUpdateOne) RemoveServerIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveServerIDs(ids...)
	return uuo
}

// RemoveServers removes "servers" edges to InstanceMetadata entities.
func (uuo *UserUpdateOne) RemoveServers(i ...*InstanceMetadata) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveServerIDs(ids...)
}

// ClearModeratedServers clears all "moderatedServers" edges to the InstanceMetadata entity.
func (uuo *UserUpdateOne) ClearModeratedServers() *UserUpdateOne {
	uuo.mutation.ClearModeratedServers()
	return uuo
}

// RemoveModeratedServerIDs removes the "moderatedServers" edge to InstanceMetadata entities by IDs.
func (uuo *UserUpdateOne) RemoveModeratedServerIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveModeratedServerIDs(ids...)
	return uuo
}

// RemoveModeratedServers removes "moderatedServers" edges to InstanceMetadata entities.
func (uuo *UserUpdateOne) RemoveModeratedServers(i ...*InstanceMetadata) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveModeratedServerIDs(ids...)
}

// ClearAdministeredServers clears all "administeredServers" edges to the InstanceMetadata entity.
func (uuo *UserUpdateOne) ClearAdministeredServers() *UserUpdateOne {
	uuo.mutation.ClearAdministeredServers()
	return uuo
}

// RemoveAdministeredServerIDs removes the "administeredServers" edge to InstanceMetadata entities by IDs.
func (uuo *UserUpdateOne) RemoveAdministeredServerIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveAdministeredServerIDs(ids...)
	return uuo
}

// RemoveAdministeredServers removes "administeredServers" edges to InstanceMetadata entities.
func (uuo *UserUpdateOne) RemoveAdministeredServers(i ...*InstanceMetadata) *UserUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return uuo.RemoveAdministeredServerIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.URI(); ok {
		if err := user.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "User.uri": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.DisplayName(); ok {
		if err := user.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "displayName", err: fmt.Errorf(`ent: validator failed for field "User.displayName": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.PrivacyLevel(); ok {
		if err := user.PrivacyLevelValidator(v); err != nil {
			return &ValidationError{Name: "privacyLevel", err: fmt.Errorf(`ent: validator failed for field "User.privacyLevel": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Inbox(); ok {
		if err := user.InboxValidator(v); err != nil {
			return &ValidationError{Name: "inbox", err: fmt.Errorf(`ent: validator failed for field "User.inbox": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Featured(); ok {
		if err := user.FeaturedValidator(v); err != nil {
			return &ValidationError{Name: "featured", err: fmt.Errorf(`ent: validator failed for field "User.featured": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Followers(); ok {
		if err := user.FollowersValidator(v); err != nil {
			return &ValidationError{Name: "followers", err: fmt.Errorf(`ent: validator failed for field "User.followers": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Following(); ok {
		if err := user.FollowingValidator(v); err != nil {
			return &ValidationError{Name: "following", err: fmt.Errorf(`ent: validator failed for field "User.following": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Outbox(); ok {
		if err := user.OutboxValidator(v); err != nil {
			return &ValidationError{Name: "outbox", err: fmt.Errorf(`ent: validator failed for field "User.outbox": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.IsRemote(); ok {
		_spec.SetField(user.FieldIsRemote, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.URI(); ok {
		_spec.SetField(user.FieldURI, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Extensions(); ok {
		_spec.SetField(user.FieldExtensions, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeBytes, value)
	}
	if uuo.mutation.PasswordHashCleared() {
		_spec.ClearField(user.FieldPasswordHash, field.TypeBytes)
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if uuo.mutation.DisplayNameCleared() {
		_spec.ClearField(user.FieldDisplayName, field.TypeString)
	}
	if value, ok := uuo.mutation.Biography(); ok {
		_spec.SetField(user.FieldBiography, field.TypeString, value)
	}
	if uuo.mutation.BiographyCleared() {
		_spec.ClearField(user.FieldBiography, field.TypeString)
	}
	if value, ok := uuo.mutation.PublicKey(); ok {
		_spec.SetField(user.FieldPublicKey, field.TypeBytes, value)
	}
	if value, ok := uuo.mutation.PublicKeyActor(); ok {
		_spec.SetField(user.FieldPublicKeyActor, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PublicKeyAlgorithm(); ok {
		_spec.SetField(user.FieldPublicKeyAlgorithm, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PrivateKey(); ok {
		_spec.SetField(user.FieldPrivateKey, field.TypeBytes, value)
	}
	if uuo.mutation.PrivateKeyCleared() {
		_spec.ClearField(user.FieldPrivateKey, field.TypeBytes)
	}
	if value, ok := uuo.mutation.Indexable(); ok {
		_spec.SetField(user.FieldIndexable, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.PrivacyLevel(); ok {
		_spec.SetField(user.FieldPrivacyLevel, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.GetFields(); ok {
		_spec.SetField(user.FieldFields, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedFields(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldFields, value)
		})
	}
	if value, ok := uuo.mutation.Inbox(); ok {
		_spec.SetField(user.FieldInbox, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Featured(); ok {
		_spec.SetField(user.FieldFeatured, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Followers(); ok {
		_spec.SetField(user.FieldFollowers, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Following(); ok {
		_spec.SetField(user.FieldFollowing, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Outbox(); ok {
		_spec.SetField(user.FieldOutbox, field.TypeString, value)
	}
	if uuo.mutation.AvatarImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.AvatarImageTable,
			Columns: []string{user.AvatarImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AvatarImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.AvatarImageTable,
			Columns: []string{user.AvatarImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.HeaderImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.HeaderImageTable,
			Columns: []string{user.HeaderImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.HeaderImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   user.HeaderImageTable,
			Columns: []string{user.HeaderImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AuthoredNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.AuthoredNotesTable,
			Columns: []string{user.AuthoredNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAuthoredNotesIDs(); len(nodes) > 0 && !uuo.mutation.AuthoredNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.AuthoredNotesTable,
			Columns: []string{user.AuthoredNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AuthoredNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.AuthoredNotesTable,
			Columns: []string{user.AuthoredNotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MentionedNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MentionedNotesTable,
			Columns: user.MentionedNotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedMentionedNotesIDs(); len(nodes) > 0 && !uuo.mutation.MentionedNotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MentionedNotesTable,
			Columns: user.MentionedNotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MentionedNotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.MentionedNotesTable,
			Columns: user.MentionedNotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedServersIDs(); len(nodes) > 0 && !uuo.mutation.ServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ServersTable,
			Columns: user.ServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ModeratedServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratedServersTable,
			Columns: user.ModeratedServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedModeratedServersIDs(); len(nodes) > 0 && !uuo.mutation.ModeratedServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratedServersTable,
			Columns: user.ModeratedServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ModeratedServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratedServersTable,
			Columns: user.ModeratedServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AdministeredServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdministeredServersTable,
			Columns: user.AdministeredServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAdministeredServersIDs(); len(nodes) > 0 && !uuo.mutation.AdministeredServersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdministeredServersTable,
			Columns: user.AdministeredServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AdministeredServersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdministeredServersTable,
			Columns: user.AdministeredServersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instancemetadata.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
