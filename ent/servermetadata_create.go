// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/lysand-org/versia-go/ent/servermetadata"
	"github.com/lysand-org/versia-go/ent/user"
	"github.com/lysand-org/versia-go/pkg/lysand"
)

// ServerMetadataCreate is the builder for creating a ServerMetadata entity.
type ServerMetadataCreate struct {
	config
	mutation *ServerMetadataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsRemote sets the "isRemote" field.
func (smc *ServerMetadataCreate) SetIsRemote(b bool) *ServerMetadataCreate {
	smc.mutation.SetIsRemote(b)
	return smc
}

// SetURI sets the "uri" field.
func (smc *ServerMetadataCreate) SetURI(s string) *ServerMetadataCreate {
	smc.mutation.SetURI(s)
	return smc
}

// SetExtensions sets the "extensions" field.
func (smc *ServerMetadataCreate) SetExtensions(l lysand.Extensions) *ServerMetadataCreate {
	smc.mutation.SetExtensions(l)
	return smc
}

// SetCreatedAt sets the "created_at" field.
func (smc *ServerMetadataCreate) SetCreatedAt(t time.Time) *ServerMetadataCreate {
	smc.mutation.SetCreatedAt(t)
	return smc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (smc *ServerMetadataCreate) SetNillableCreatedAt(t *time.Time) *ServerMetadataCreate {
	if t != nil {
		smc.SetCreatedAt(*t)
	}
	return smc
}

// SetUpdatedAt sets the "updated_at" field.
func (smc *ServerMetadataCreate) SetUpdatedAt(t time.Time) *ServerMetadataCreate {
	smc.mutation.SetUpdatedAt(t)
	return smc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (smc *ServerMetadataCreate) SetNillableUpdatedAt(t *time.Time) *ServerMetadataCreate {
	if t != nil {
		smc.SetUpdatedAt(*t)
	}
	return smc
}

// SetName sets the "name" field.
func (smc *ServerMetadataCreate) SetName(s string) *ServerMetadataCreate {
	smc.mutation.SetName(s)
	return smc
}

// SetDescription sets the "description" field.
func (smc *ServerMetadataCreate) SetDescription(s string) *ServerMetadataCreate {
	smc.mutation.SetDescription(s)
	return smc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (smc *ServerMetadataCreate) SetNillableDescription(s *string) *ServerMetadataCreate {
	if s != nil {
		smc.SetDescription(*s)
	}
	return smc
}

// SetVersion sets the "version" field.
func (smc *ServerMetadataCreate) SetVersion(s string) *ServerMetadataCreate {
	smc.mutation.SetVersion(s)
	return smc
}

// SetSupportedExtensions sets the "supportedExtensions" field.
func (smc *ServerMetadataCreate) SetSupportedExtensions(s []string) *ServerMetadataCreate {
	smc.mutation.SetSupportedExtensions(s)
	return smc
}

// SetID sets the "id" field.
func (smc *ServerMetadataCreate) SetID(u uuid.UUID) *ServerMetadataCreate {
	smc.mutation.SetID(u)
	return smc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (smc *ServerMetadataCreate) SetNillableID(u *uuid.UUID) *ServerMetadataCreate {
	if u != nil {
		smc.SetID(*u)
	}
	return smc
}

// SetFollowerID sets the "follower" edge to the User entity by ID.
func (smc *ServerMetadataCreate) SetFollowerID(id uuid.UUID) *ServerMetadataCreate {
	smc.mutation.SetFollowerID(id)
	return smc
}

// SetFollower sets the "follower" edge to the User entity.
func (smc *ServerMetadataCreate) SetFollower(u *User) *ServerMetadataCreate {
	return smc.SetFollowerID(u.ID)
}

// SetFolloweeID sets the "followee" edge to the User entity by ID.
func (smc *ServerMetadataCreate) SetFolloweeID(id uuid.UUID) *ServerMetadataCreate {
	smc.mutation.SetFolloweeID(id)
	return smc
}

// SetFollowee sets the "followee" edge to the User entity.
func (smc *ServerMetadataCreate) SetFollowee(u *User) *ServerMetadataCreate {
	return smc.SetFolloweeID(u.ID)
}

// Mutation returns the ServerMetadataMutation object of the builder.
func (smc *ServerMetadataCreate) Mutation() *ServerMetadataMutation {
	return smc.mutation
}

// Save creates the ServerMetadata in the database.
func (smc *ServerMetadataCreate) Save(ctx context.Context) (*ServerMetadata, error) {
	smc.defaults()
	return withHooks(ctx, smc.sqlSave, smc.mutation, smc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (smc *ServerMetadataCreate) SaveX(ctx context.Context) *ServerMetadata {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *ServerMetadataCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *ServerMetadataCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (smc *ServerMetadataCreate) defaults() {
	if _, ok := smc.mutation.Extensions(); !ok {
		v := servermetadata.DefaultExtensions
		smc.mutation.SetExtensions(v)
	}
	if _, ok := smc.mutation.CreatedAt(); !ok {
		v := servermetadata.DefaultCreatedAt()
		smc.mutation.SetCreatedAt(v)
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		v := servermetadata.DefaultUpdatedAt()
		smc.mutation.SetUpdatedAt(v)
	}
	if _, ok := smc.mutation.SupportedExtensions(); !ok {
		v := servermetadata.DefaultSupportedExtensions
		smc.mutation.SetSupportedExtensions(v)
	}
	if _, ok := smc.mutation.ID(); !ok {
		v := servermetadata.DefaultID()
		smc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *ServerMetadataCreate) check() error {
	if _, ok := smc.mutation.IsRemote(); !ok {
		return &ValidationError{Name: "isRemote", err: errors.New(`ent: missing required field "ServerMetadata.isRemote"`)}
	}
	if _, ok := smc.mutation.URI(); !ok {
		return &ValidationError{Name: "uri", err: errors.New(`ent: missing required field "ServerMetadata.uri"`)}
	}
	if v, ok := smc.mutation.URI(); ok {
		if err := servermetadata.URIValidator(v); err != nil {
			return &ValidationError{Name: "uri", err: fmt.Errorf(`ent: validator failed for field "ServerMetadata.uri": %w`, err)}
		}
	}
	if _, ok := smc.mutation.Extensions(); !ok {
		return &ValidationError{Name: "extensions", err: errors.New(`ent: missing required field "ServerMetadata.extensions"`)}
	}
	if _, ok := smc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ServerMetadata.created_at"`)}
	}
	if _, ok := smc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ServerMetadata.updated_at"`)}
	}
	if _, ok := smc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ServerMetadata.name"`)}
	}
	if v, ok := smc.mutation.Name(); ok {
		if err := servermetadata.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ServerMetadata.name": %w`, err)}
		}
	}
	if _, ok := smc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "ServerMetadata.version"`)}
	}
	if v, ok := smc.mutation.Version(); ok {
		if err := servermetadata.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "ServerMetadata.version": %w`, err)}
		}
	}
	if _, ok := smc.mutation.SupportedExtensions(); !ok {
		return &ValidationError{Name: "supportedExtensions", err: errors.New(`ent: missing required field "ServerMetadata.supportedExtensions"`)}
	}
	if _, ok := smc.mutation.FollowerID(); !ok {
		return &ValidationError{Name: "follower", err: errors.New(`ent: missing required edge "ServerMetadata.follower"`)}
	}
	if _, ok := smc.mutation.FolloweeID(); !ok {
		return &ValidationError{Name: "followee", err: errors.New(`ent: missing required edge "ServerMetadata.followee"`)}
	}
	return nil
}

func (smc *ServerMetadataCreate) sqlSave(ctx context.Context) (*ServerMetadata, error) {
	if err := smc.check(); err != nil {
		return nil, err
	}
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	smc.mutation.id = &_node.ID
	smc.mutation.done = true
	return _node, nil
}

func (smc *ServerMetadataCreate) createSpec() (*ServerMetadata, *sqlgraph.CreateSpec) {
	var (
		_node = &ServerMetadata{config: smc.config}
		_spec = sqlgraph.NewCreateSpec(servermetadata.Table, sqlgraph.NewFieldSpec(servermetadata.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = smc.conflict
	if id, ok := smc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := smc.mutation.IsRemote(); ok {
		_spec.SetField(servermetadata.FieldIsRemote, field.TypeBool, value)
		_node.IsRemote = value
	}
	if value, ok := smc.mutation.URI(); ok {
		_spec.SetField(servermetadata.FieldURI, field.TypeString, value)
		_node.URI = value
	}
	if value, ok := smc.mutation.Extensions(); ok {
		_spec.SetField(servermetadata.FieldExtensions, field.TypeJSON, value)
		_node.Extensions = value
	}
	if value, ok := smc.mutation.CreatedAt(); ok {
		_spec.SetField(servermetadata.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := smc.mutation.UpdatedAt(); ok {
		_spec.SetField(servermetadata.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := smc.mutation.Name(); ok {
		_spec.SetField(servermetadata.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := smc.mutation.Description(); ok {
		_spec.SetField(servermetadata.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := smc.mutation.Version(); ok {
		_spec.SetField(servermetadata.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := smc.mutation.SupportedExtensions(); ok {
		_spec.SetField(servermetadata.FieldSupportedExtensions, field.TypeJSON, value)
		_node.SupportedExtensions = value
	}
	if nodes := smc.mutation.FollowerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servermetadata.FollowerTable,
			Columns: []string{servermetadata.FollowerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.server_metadata_follower = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := smc.mutation.FolloweeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   servermetadata.FolloweeTable,
			Columns: []string{servermetadata.FolloweeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.server_metadata_followee = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServerMetadata.Create().
//		SetIsRemote(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServerMetadataUpsert) {
//			SetIsRemote(v+v).
//		}).
//		Exec(ctx)
func (smc *ServerMetadataCreate) OnConflict(opts ...sql.ConflictOption) *ServerMetadataUpsertOne {
	smc.conflict = opts
	return &ServerMetadataUpsertOne{
		create: smc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServerMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (smc *ServerMetadataCreate) OnConflictColumns(columns ...string) *ServerMetadataUpsertOne {
	smc.conflict = append(smc.conflict, sql.ConflictColumns(columns...))
	return &ServerMetadataUpsertOne{
		create: smc,
	}
}

type (
	// ServerMetadataUpsertOne is the builder for "upsert"-ing
	//  one ServerMetadata node.
	ServerMetadataUpsertOne struct {
		create *ServerMetadataCreate
	}

	// ServerMetadataUpsert is the "OnConflict" setter.
	ServerMetadataUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsRemote sets the "isRemote" field.
func (u *ServerMetadataUpsert) SetIsRemote(v bool) *ServerMetadataUpsert {
	u.Set(servermetadata.FieldIsRemote, v)
	return u
}

// UpdateIsRemote sets the "isRemote" field to the value that was provided on create.
func (u *ServerMetadataUpsert) UpdateIsRemote() *ServerMetadataUpsert {
	u.SetExcluded(servermetadata.FieldIsRemote)
	return u
}

// SetURI sets the "uri" field.
func (u *ServerMetadataUpsert) SetURI(v string) *ServerMetadataUpsert {
	u.Set(servermetadata.FieldURI, v)
	return u
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *ServerMetadataUpsert) UpdateURI() *ServerMetadataUpsert {
	u.SetExcluded(servermetadata.FieldURI)
	return u
}

// SetExtensions sets the "extensions" field.
func (u *ServerMetadataUpsert) SetExtensions(v lysand.Extensions) *ServerMetadataUpsert {
	u.Set(servermetadata.FieldExtensions, v)
	return u
}

// UpdateExtensions sets the "extensions" field to the value that was provided on create.
func (u *ServerMetadataUpsert) UpdateExtensions() *ServerMetadataUpsert {
	u.SetExcluded(servermetadata.FieldExtensions)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ServerMetadataUpsert) SetUpdatedAt(v time.Time) *ServerMetadataUpsert {
	u.Set(servermetadata.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ServerMetadataUpsert) UpdateUpdatedAt() *ServerMetadataUpsert {
	u.SetExcluded(servermetadata.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *ServerMetadataUpsert) SetName(v string) *ServerMetadataUpsert {
	u.Set(servermetadata.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServerMetadataUpsert) UpdateName() *ServerMetadataUpsert {
	u.SetExcluded(servermetadata.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *ServerMetadataUpsert) SetDescription(v string) *ServerMetadataUpsert {
	u.Set(servermetadata.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServerMetadataUpsert) UpdateDescription() *ServerMetadataUpsert {
	u.SetExcluded(servermetadata.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *ServerMetadataUpsert) ClearDescription() *ServerMetadataUpsert {
	u.SetNull(servermetadata.FieldDescription)
	return u
}

// SetVersion sets the "version" field.
func (u *ServerMetadataUpsert) SetVersion(v string) *ServerMetadataUpsert {
	u.Set(servermetadata.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ServerMetadataUpsert) UpdateVersion() *ServerMetadataUpsert {
	u.SetExcluded(servermetadata.FieldVersion)
	return u
}

// SetSupportedExtensions sets the "supportedExtensions" field.
func (u *ServerMetadataUpsert) SetSupportedExtensions(v []string) *ServerMetadataUpsert {
	u.Set(servermetadata.FieldSupportedExtensions, v)
	return u
}

// UpdateSupportedExtensions sets the "supportedExtensions" field to the value that was provided on create.
func (u *ServerMetadataUpsert) UpdateSupportedExtensions() *ServerMetadataUpsert {
	u.SetExcluded(servermetadata.FieldSupportedExtensions)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ServerMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(servermetadata.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServerMetadataUpsertOne) UpdateNewValues() *ServerMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(servermetadata.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(servermetadata.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServerMetadata.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ServerMetadataUpsertOne) Ignore() *ServerMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServerMetadataUpsertOne) DoNothing() *ServerMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServerMetadataCreate.OnConflict
// documentation for more info.
func (u *ServerMetadataUpsertOne) Update(set func(*ServerMetadataUpsert)) *ServerMetadataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServerMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsRemote sets the "isRemote" field.
func (u *ServerMetadataUpsertOne) SetIsRemote(v bool) *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetIsRemote(v)
	})
}

// UpdateIsRemote sets the "isRemote" field to the value that was provided on create.
func (u *ServerMetadataUpsertOne) UpdateIsRemote() *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateIsRemote()
	})
}

// SetURI sets the "uri" field.
func (u *ServerMetadataUpsertOne) SetURI(v string) *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetURI(v)
	})
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *ServerMetadataUpsertOne) UpdateURI() *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateURI()
	})
}

// SetExtensions sets the "extensions" field.
func (u *ServerMetadataUpsertOne) SetExtensions(v lysand.Extensions) *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetExtensions(v)
	})
}

// UpdateExtensions sets the "extensions" field to the value that was provided on create.
func (u *ServerMetadataUpsertOne) UpdateExtensions() *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateExtensions()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ServerMetadataUpsertOne) SetUpdatedAt(v time.Time) *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ServerMetadataUpsertOne) UpdateUpdatedAt() *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *ServerMetadataUpsertOne) SetName(v string) *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServerMetadataUpsertOne) UpdateName() *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ServerMetadataUpsertOne) SetDescription(v string) *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServerMetadataUpsertOne) UpdateDescription() *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ServerMetadataUpsertOne) ClearDescription() *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.ClearDescription()
	})
}

// SetVersion sets the "version" field.
func (u *ServerMetadataUpsertOne) SetVersion(v string) *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ServerMetadataUpsertOne) UpdateVersion() *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateVersion()
	})
}

// SetSupportedExtensions sets the "supportedExtensions" field.
func (u *ServerMetadataUpsertOne) SetSupportedExtensions(v []string) *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetSupportedExtensions(v)
	})
}

// UpdateSupportedExtensions sets the "supportedExtensions" field to the value that was provided on create.
func (u *ServerMetadataUpsertOne) UpdateSupportedExtensions() *ServerMetadataUpsertOne {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateSupportedExtensions()
	})
}

// Exec executes the query.
func (u *ServerMetadataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ServerMetadataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServerMetadataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServerMetadataUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ServerMetadataUpsertOne.ID is not supported by MySQL driver. Use ServerMetadataUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServerMetadataUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServerMetadataCreateBulk is the builder for creating many ServerMetadata entities in bulk.
type ServerMetadataCreateBulk struct {
	config
	err      error
	builders []*ServerMetadataCreate
	conflict []sql.ConflictOption
}

// Save creates the ServerMetadata entities in the database.
func (smcb *ServerMetadataCreateBulk) Save(ctx context.Context) ([]*ServerMetadata, error) {
	if smcb.err != nil {
		return nil, smcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*ServerMetadata, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerMetadataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = smcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *ServerMetadataCreateBulk) SaveX(ctx context.Context) []*ServerMetadata {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *ServerMetadataCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *ServerMetadataCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ServerMetadata.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServerMetadataUpsert) {
//			SetIsRemote(v+v).
//		}).
//		Exec(ctx)
func (smcb *ServerMetadataCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServerMetadataUpsertBulk {
	smcb.conflict = opts
	return &ServerMetadataUpsertBulk{
		create: smcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ServerMetadata.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (smcb *ServerMetadataCreateBulk) OnConflictColumns(columns ...string) *ServerMetadataUpsertBulk {
	smcb.conflict = append(smcb.conflict, sql.ConflictColumns(columns...))
	return &ServerMetadataUpsertBulk{
		create: smcb,
	}
}

// ServerMetadataUpsertBulk is the builder for "upsert"-ing
// a bulk of ServerMetadata nodes.
type ServerMetadataUpsertBulk struct {
	create *ServerMetadataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ServerMetadata.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(servermetadata.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ServerMetadataUpsertBulk) UpdateNewValues() *ServerMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(servermetadata.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(servermetadata.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ServerMetadata.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ServerMetadataUpsertBulk) Ignore() *ServerMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServerMetadataUpsertBulk) DoNothing() *ServerMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServerMetadataCreateBulk.OnConflict
// documentation for more info.
func (u *ServerMetadataUpsertBulk) Update(set func(*ServerMetadataUpsert)) *ServerMetadataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServerMetadataUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsRemote sets the "isRemote" field.
func (u *ServerMetadataUpsertBulk) SetIsRemote(v bool) *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetIsRemote(v)
	})
}

// UpdateIsRemote sets the "isRemote" field to the value that was provided on create.
func (u *ServerMetadataUpsertBulk) UpdateIsRemote() *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateIsRemote()
	})
}

// SetURI sets the "uri" field.
func (u *ServerMetadataUpsertBulk) SetURI(v string) *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetURI(v)
	})
}

// UpdateURI sets the "uri" field to the value that was provided on create.
func (u *ServerMetadataUpsertBulk) UpdateURI() *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateURI()
	})
}

// SetExtensions sets the "extensions" field.
func (u *ServerMetadataUpsertBulk) SetExtensions(v lysand.Extensions) *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetExtensions(v)
	})
}

// UpdateExtensions sets the "extensions" field to the value that was provided on create.
func (u *ServerMetadataUpsertBulk) UpdateExtensions() *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateExtensions()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ServerMetadataUpsertBulk) SetUpdatedAt(v time.Time) *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ServerMetadataUpsertBulk) UpdateUpdatedAt() *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *ServerMetadataUpsertBulk) SetName(v string) *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ServerMetadataUpsertBulk) UpdateName() *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *ServerMetadataUpsertBulk) SetDescription(v string) *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *ServerMetadataUpsertBulk) UpdateDescription() *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *ServerMetadataUpsertBulk) ClearDescription() *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.ClearDescription()
	})
}

// SetVersion sets the "version" field.
func (u *ServerMetadataUpsertBulk) SetVersion(v string) *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ServerMetadataUpsertBulk) UpdateVersion() *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateVersion()
	})
}

// SetSupportedExtensions sets the "supportedExtensions" field.
func (u *ServerMetadataUpsertBulk) SetSupportedExtensions(v []string) *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.SetSupportedExtensions(v)
	})
}

// UpdateSupportedExtensions sets the "supportedExtensions" field to the value that was provided on create.
func (u *ServerMetadataUpsertBulk) UpdateSupportedExtensions() *ServerMetadataUpsertBulk {
	return u.Update(func(s *ServerMetadataUpsert) {
		s.UpdateSupportedExtensions()
	})
}

// Exec executes the query.
func (u *ServerMetadataUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ServerMetadataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ServerMetadataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServerMetadataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
