// Code generated by ent, DO NOT EDIT.

package instancemetadata

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lysand-org/versia-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldID, id))
}

// IsRemote applies equality check predicate on the "isRemote" field. It's identical to IsRemoteEQ.
func IsRemote(v bool) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldIsRemote, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldURI, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldDescription, v))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldHost, v))
}

// PublicKey applies equality check predicate on the "publicKey" field. It's identical to PublicKeyEQ.
func PublicKey(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyAlgorithm applies equality check predicate on the "publicKeyAlgorithm" field. It's identical to PublicKeyAlgorithmEQ.
func PublicKeyAlgorithm(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldPublicKeyAlgorithm, v))
}

// PrivateKey applies equality check predicate on the "privateKey" field. It's identical to PrivateKeyEQ.
func PrivateKey(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldPrivateKey, v))
}

// SoftwareName applies equality check predicate on the "softwareName" field. It's identical to SoftwareNameEQ.
func SoftwareName(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldSoftwareName, v))
}

// SoftwareVersion applies equality check predicate on the "softwareVersion" field. It's identical to SoftwareVersionEQ.
func SoftwareVersion(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldSoftwareVersion, v))
}

// SharedInboxURI applies equality check predicate on the "sharedInboxURI" field. It's identical to SharedInboxURIEQ.
func SharedInboxURI(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldSharedInboxURI, v))
}

// ModeratorsURI applies equality check predicate on the "moderatorsURI" field. It's identical to ModeratorsURIEQ.
func ModeratorsURI(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldModeratorsURI, v))
}

// AdminsURI applies equality check predicate on the "adminsURI" field. It's identical to AdminsURIEQ.
func AdminsURI(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldAdminsURI, v))
}

// LogoEndpoint applies equality check predicate on the "logoEndpoint" field. It's identical to LogoEndpointEQ.
func LogoEndpoint(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldLogoEndpoint, v))
}

// LogoMimeType applies equality check predicate on the "logoMimeType" field. It's identical to LogoMimeTypeEQ.
func LogoMimeType(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldLogoMimeType, v))
}

// BannerEndpoint applies equality check predicate on the "bannerEndpoint" field. It's identical to BannerEndpointEQ.
func BannerEndpoint(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldBannerEndpoint, v))
}

// BannerMimeType applies equality check predicate on the "bannerMimeType" field. It's identical to BannerMimeTypeEQ.
func BannerMimeType(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldBannerMimeType, v))
}

// IsRemoteEQ applies the EQ predicate on the "isRemote" field.
func IsRemoteEQ(v bool) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldIsRemote, v))
}

// IsRemoteNEQ applies the NEQ predicate on the "isRemote" field.
func IsRemoteNEQ(v bool) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldIsRemote, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldURI, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldDescription, v))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldHost, v))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldHost, v))
}

// PublicKeyEQ applies the EQ predicate on the "publicKey" field.
func PublicKeyEQ(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldPublicKey, v))
}

// PublicKeyNEQ applies the NEQ predicate on the "publicKey" field.
func PublicKeyNEQ(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldPublicKey, v))
}

// PublicKeyIn applies the In predicate on the "publicKey" field.
func PublicKeyIn(vs ...[]byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldPublicKey, vs...))
}

// PublicKeyNotIn applies the NotIn predicate on the "publicKey" field.
func PublicKeyNotIn(vs ...[]byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldPublicKey, vs...))
}

// PublicKeyGT applies the GT predicate on the "publicKey" field.
func PublicKeyGT(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldPublicKey, v))
}

// PublicKeyGTE applies the GTE predicate on the "publicKey" field.
func PublicKeyGTE(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldPublicKey, v))
}

// PublicKeyLT applies the LT predicate on the "publicKey" field.
func PublicKeyLT(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldPublicKey, v))
}

// PublicKeyLTE applies the LTE predicate on the "publicKey" field.
func PublicKeyLTE(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldPublicKey, v))
}

// PublicKeyAlgorithmEQ applies the EQ predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldPublicKeyAlgorithm, v))
}

// PublicKeyAlgorithmNEQ applies the NEQ predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldPublicKeyAlgorithm, v))
}

// PublicKeyAlgorithmIn applies the In predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldPublicKeyAlgorithm, vs...))
}

// PublicKeyAlgorithmNotIn applies the NotIn predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldPublicKeyAlgorithm, vs...))
}

// PublicKeyAlgorithmGT applies the GT predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldPublicKeyAlgorithm, v))
}

// PublicKeyAlgorithmGTE applies the GTE predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldPublicKeyAlgorithm, v))
}

// PublicKeyAlgorithmLT applies the LT predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldPublicKeyAlgorithm, v))
}

// PublicKeyAlgorithmLTE applies the LTE predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldPublicKeyAlgorithm, v))
}

// PublicKeyAlgorithmContains applies the Contains predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldPublicKeyAlgorithm, v))
}

// PublicKeyAlgorithmHasPrefix applies the HasPrefix predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldPublicKeyAlgorithm, v))
}

// PublicKeyAlgorithmHasSuffix applies the HasSuffix predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldPublicKeyAlgorithm, v))
}

// PublicKeyAlgorithmEqualFold applies the EqualFold predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldPublicKeyAlgorithm, v))
}

// PublicKeyAlgorithmContainsFold applies the ContainsFold predicate on the "publicKeyAlgorithm" field.
func PublicKeyAlgorithmContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldPublicKeyAlgorithm, v))
}

// PrivateKeyEQ applies the EQ predicate on the "privateKey" field.
func PrivateKeyEQ(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldPrivateKey, v))
}

// PrivateKeyNEQ applies the NEQ predicate on the "privateKey" field.
func PrivateKeyNEQ(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldPrivateKey, v))
}

// PrivateKeyIn applies the In predicate on the "privateKey" field.
func PrivateKeyIn(vs ...[]byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldPrivateKey, vs...))
}

// PrivateKeyNotIn applies the NotIn predicate on the "privateKey" field.
func PrivateKeyNotIn(vs ...[]byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldPrivateKey, vs...))
}

// PrivateKeyGT applies the GT predicate on the "privateKey" field.
func PrivateKeyGT(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldPrivateKey, v))
}

// PrivateKeyGTE applies the GTE predicate on the "privateKey" field.
func PrivateKeyGTE(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldPrivateKey, v))
}

// PrivateKeyLT applies the LT predicate on the "privateKey" field.
func PrivateKeyLT(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldPrivateKey, v))
}

// PrivateKeyLTE applies the LTE predicate on the "privateKey" field.
func PrivateKeyLTE(v []byte) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldPrivateKey, v))
}

// PrivateKeyIsNil applies the IsNil predicate on the "privateKey" field.
func PrivateKeyIsNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIsNull(FieldPrivateKey))
}

// PrivateKeyNotNil applies the NotNil predicate on the "privateKey" field.
func PrivateKeyNotNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotNull(FieldPrivateKey))
}

// SoftwareNameEQ applies the EQ predicate on the "softwareName" field.
func SoftwareNameEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldSoftwareName, v))
}

// SoftwareNameNEQ applies the NEQ predicate on the "softwareName" field.
func SoftwareNameNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldSoftwareName, v))
}

// SoftwareNameIn applies the In predicate on the "softwareName" field.
func SoftwareNameIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldSoftwareName, vs...))
}

// SoftwareNameNotIn applies the NotIn predicate on the "softwareName" field.
func SoftwareNameNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldSoftwareName, vs...))
}

// SoftwareNameGT applies the GT predicate on the "softwareName" field.
func SoftwareNameGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldSoftwareName, v))
}

// SoftwareNameGTE applies the GTE predicate on the "softwareName" field.
func SoftwareNameGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldSoftwareName, v))
}

// SoftwareNameLT applies the LT predicate on the "softwareName" field.
func SoftwareNameLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldSoftwareName, v))
}

// SoftwareNameLTE applies the LTE predicate on the "softwareName" field.
func SoftwareNameLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldSoftwareName, v))
}

// SoftwareNameContains applies the Contains predicate on the "softwareName" field.
func SoftwareNameContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldSoftwareName, v))
}

// SoftwareNameHasPrefix applies the HasPrefix predicate on the "softwareName" field.
func SoftwareNameHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldSoftwareName, v))
}

// SoftwareNameHasSuffix applies the HasSuffix predicate on the "softwareName" field.
func SoftwareNameHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldSoftwareName, v))
}

// SoftwareNameEqualFold applies the EqualFold predicate on the "softwareName" field.
func SoftwareNameEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldSoftwareName, v))
}

// SoftwareNameContainsFold applies the ContainsFold predicate on the "softwareName" field.
func SoftwareNameContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldSoftwareName, v))
}

// SoftwareVersionEQ applies the EQ predicate on the "softwareVersion" field.
func SoftwareVersionEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldSoftwareVersion, v))
}

// SoftwareVersionNEQ applies the NEQ predicate on the "softwareVersion" field.
func SoftwareVersionNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldSoftwareVersion, v))
}

// SoftwareVersionIn applies the In predicate on the "softwareVersion" field.
func SoftwareVersionIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldSoftwareVersion, vs...))
}

// SoftwareVersionNotIn applies the NotIn predicate on the "softwareVersion" field.
func SoftwareVersionNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldSoftwareVersion, vs...))
}

// SoftwareVersionGT applies the GT predicate on the "softwareVersion" field.
func SoftwareVersionGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldSoftwareVersion, v))
}

// SoftwareVersionGTE applies the GTE predicate on the "softwareVersion" field.
func SoftwareVersionGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldSoftwareVersion, v))
}

// SoftwareVersionLT applies the LT predicate on the "softwareVersion" field.
func SoftwareVersionLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldSoftwareVersion, v))
}

// SoftwareVersionLTE applies the LTE predicate on the "softwareVersion" field.
func SoftwareVersionLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldSoftwareVersion, v))
}

// SoftwareVersionContains applies the Contains predicate on the "softwareVersion" field.
func SoftwareVersionContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldSoftwareVersion, v))
}

// SoftwareVersionHasPrefix applies the HasPrefix predicate on the "softwareVersion" field.
func SoftwareVersionHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldSoftwareVersion, v))
}

// SoftwareVersionHasSuffix applies the HasSuffix predicate on the "softwareVersion" field.
func SoftwareVersionHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldSoftwareVersion, v))
}

// SoftwareVersionEqualFold applies the EqualFold predicate on the "softwareVersion" field.
func SoftwareVersionEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldSoftwareVersion, v))
}

// SoftwareVersionContainsFold applies the ContainsFold predicate on the "softwareVersion" field.
func SoftwareVersionContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldSoftwareVersion, v))
}

// SharedInboxURIEQ applies the EQ predicate on the "sharedInboxURI" field.
func SharedInboxURIEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldSharedInboxURI, v))
}

// SharedInboxURINEQ applies the NEQ predicate on the "sharedInboxURI" field.
func SharedInboxURINEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldSharedInboxURI, v))
}

// SharedInboxURIIn applies the In predicate on the "sharedInboxURI" field.
func SharedInboxURIIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldSharedInboxURI, vs...))
}

// SharedInboxURINotIn applies the NotIn predicate on the "sharedInboxURI" field.
func SharedInboxURINotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldSharedInboxURI, vs...))
}

// SharedInboxURIGT applies the GT predicate on the "sharedInboxURI" field.
func SharedInboxURIGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldSharedInboxURI, v))
}

// SharedInboxURIGTE applies the GTE predicate on the "sharedInboxURI" field.
func SharedInboxURIGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldSharedInboxURI, v))
}

// SharedInboxURILT applies the LT predicate on the "sharedInboxURI" field.
func SharedInboxURILT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldSharedInboxURI, v))
}

// SharedInboxURILTE applies the LTE predicate on the "sharedInboxURI" field.
func SharedInboxURILTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldSharedInboxURI, v))
}

// SharedInboxURIContains applies the Contains predicate on the "sharedInboxURI" field.
func SharedInboxURIContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldSharedInboxURI, v))
}

// SharedInboxURIHasPrefix applies the HasPrefix predicate on the "sharedInboxURI" field.
func SharedInboxURIHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldSharedInboxURI, v))
}

// SharedInboxURIHasSuffix applies the HasSuffix predicate on the "sharedInboxURI" field.
func SharedInboxURIHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldSharedInboxURI, v))
}

// SharedInboxURIEqualFold applies the EqualFold predicate on the "sharedInboxURI" field.
func SharedInboxURIEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldSharedInboxURI, v))
}

// SharedInboxURIContainsFold applies the ContainsFold predicate on the "sharedInboxURI" field.
func SharedInboxURIContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldSharedInboxURI, v))
}

// ModeratorsURIEQ applies the EQ predicate on the "moderatorsURI" field.
func ModeratorsURIEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldModeratorsURI, v))
}

// ModeratorsURINEQ applies the NEQ predicate on the "moderatorsURI" field.
func ModeratorsURINEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldModeratorsURI, v))
}

// ModeratorsURIIn applies the In predicate on the "moderatorsURI" field.
func ModeratorsURIIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldModeratorsURI, vs...))
}

// ModeratorsURINotIn applies the NotIn predicate on the "moderatorsURI" field.
func ModeratorsURINotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldModeratorsURI, vs...))
}

// ModeratorsURIGT applies the GT predicate on the "moderatorsURI" field.
func ModeratorsURIGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldModeratorsURI, v))
}

// ModeratorsURIGTE applies the GTE predicate on the "moderatorsURI" field.
func ModeratorsURIGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldModeratorsURI, v))
}

// ModeratorsURILT applies the LT predicate on the "moderatorsURI" field.
func ModeratorsURILT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldModeratorsURI, v))
}

// ModeratorsURILTE applies the LTE predicate on the "moderatorsURI" field.
func ModeratorsURILTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldModeratorsURI, v))
}

// ModeratorsURIContains applies the Contains predicate on the "moderatorsURI" field.
func ModeratorsURIContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldModeratorsURI, v))
}

// ModeratorsURIHasPrefix applies the HasPrefix predicate on the "moderatorsURI" field.
func ModeratorsURIHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldModeratorsURI, v))
}

// ModeratorsURIHasSuffix applies the HasSuffix predicate on the "moderatorsURI" field.
func ModeratorsURIHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldModeratorsURI, v))
}

// ModeratorsURIIsNil applies the IsNil predicate on the "moderatorsURI" field.
func ModeratorsURIIsNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIsNull(FieldModeratorsURI))
}

// ModeratorsURINotNil applies the NotNil predicate on the "moderatorsURI" field.
func ModeratorsURINotNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotNull(FieldModeratorsURI))
}

// ModeratorsURIEqualFold applies the EqualFold predicate on the "moderatorsURI" field.
func ModeratorsURIEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldModeratorsURI, v))
}

// ModeratorsURIContainsFold applies the ContainsFold predicate on the "moderatorsURI" field.
func ModeratorsURIContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldModeratorsURI, v))
}

// AdminsURIEQ applies the EQ predicate on the "adminsURI" field.
func AdminsURIEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldAdminsURI, v))
}

// AdminsURINEQ applies the NEQ predicate on the "adminsURI" field.
func AdminsURINEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldAdminsURI, v))
}

// AdminsURIIn applies the In predicate on the "adminsURI" field.
func AdminsURIIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldAdminsURI, vs...))
}

// AdminsURINotIn applies the NotIn predicate on the "adminsURI" field.
func AdminsURINotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldAdminsURI, vs...))
}

// AdminsURIGT applies the GT predicate on the "adminsURI" field.
func AdminsURIGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldAdminsURI, v))
}

// AdminsURIGTE applies the GTE predicate on the "adminsURI" field.
func AdminsURIGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldAdminsURI, v))
}

// AdminsURILT applies the LT predicate on the "adminsURI" field.
func AdminsURILT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldAdminsURI, v))
}

// AdminsURILTE applies the LTE predicate on the "adminsURI" field.
func AdminsURILTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldAdminsURI, v))
}

// AdminsURIContains applies the Contains predicate on the "adminsURI" field.
func AdminsURIContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldAdminsURI, v))
}

// AdminsURIHasPrefix applies the HasPrefix predicate on the "adminsURI" field.
func AdminsURIHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldAdminsURI, v))
}

// AdminsURIHasSuffix applies the HasSuffix predicate on the "adminsURI" field.
func AdminsURIHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldAdminsURI, v))
}

// AdminsURIIsNil applies the IsNil predicate on the "adminsURI" field.
func AdminsURIIsNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIsNull(FieldAdminsURI))
}

// AdminsURINotNil applies the NotNil predicate on the "adminsURI" field.
func AdminsURINotNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotNull(FieldAdminsURI))
}

// AdminsURIEqualFold applies the EqualFold predicate on the "adminsURI" field.
func AdminsURIEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldAdminsURI, v))
}

// AdminsURIContainsFold applies the ContainsFold predicate on the "adminsURI" field.
func AdminsURIContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldAdminsURI, v))
}

// LogoEndpointEQ applies the EQ predicate on the "logoEndpoint" field.
func LogoEndpointEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldLogoEndpoint, v))
}

// LogoEndpointNEQ applies the NEQ predicate on the "logoEndpoint" field.
func LogoEndpointNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldLogoEndpoint, v))
}

// LogoEndpointIn applies the In predicate on the "logoEndpoint" field.
func LogoEndpointIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldLogoEndpoint, vs...))
}

// LogoEndpointNotIn applies the NotIn predicate on the "logoEndpoint" field.
func LogoEndpointNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldLogoEndpoint, vs...))
}

// LogoEndpointGT applies the GT predicate on the "logoEndpoint" field.
func LogoEndpointGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldLogoEndpoint, v))
}

// LogoEndpointGTE applies the GTE predicate on the "logoEndpoint" field.
func LogoEndpointGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldLogoEndpoint, v))
}

// LogoEndpointLT applies the LT predicate on the "logoEndpoint" field.
func LogoEndpointLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldLogoEndpoint, v))
}

// LogoEndpointLTE applies the LTE predicate on the "logoEndpoint" field.
func LogoEndpointLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldLogoEndpoint, v))
}

// LogoEndpointContains applies the Contains predicate on the "logoEndpoint" field.
func LogoEndpointContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldLogoEndpoint, v))
}

// LogoEndpointHasPrefix applies the HasPrefix predicate on the "logoEndpoint" field.
func LogoEndpointHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldLogoEndpoint, v))
}

// LogoEndpointHasSuffix applies the HasSuffix predicate on the "logoEndpoint" field.
func LogoEndpointHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldLogoEndpoint, v))
}

// LogoEndpointIsNil applies the IsNil predicate on the "logoEndpoint" field.
func LogoEndpointIsNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIsNull(FieldLogoEndpoint))
}

// LogoEndpointNotNil applies the NotNil predicate on the "logoEndpoint" field.
func LogoEndpointNotNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotNull(FieldLogoEndpoint))
}

// LogoEndpointEqualFold applies the EqualFold predicate on the "logoEndpoint" field.
func LogoEndpointEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldLogoEndpoint, v))
}

// LogoEndpointContainsFold applies the ContainsFold predicate on the "logoEndpoint" field.
func LogoEndpointContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldLogoEndpoint, v))
}

// LogoMimeTypeEQ applies the EQ predicate on the "logoMimeType" field.
func LogoMimeTypeEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldLogoMimeType, v))
}

// LogoMimeTypeNEQ applies the NEQ predicate on the "logoMimeType" field.
func LogoMimeTypeNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldLogoMimeType, v))
}

// LogoMimeTypeIn applies the In predicate on the "logoMimeType" field.
func LogoMimeTypeIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldLogoMimeType, vs...))
}

// LogoMimeTypeNotIn applies the NotIn predicate on the "logoMimeType" field.
func LogoMimeTypeNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldLogoMimeType, vs...))
}

// LogoMimeTypeGT applies the GT predicate on the "logoMimeType" field.
func LogoMimeTypeGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldLogoMimeType, v))
}

// LogoMimeTypeGTE applies the GTE predicate on the "logoMimeType" field.
func LogoMimeTypeGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldLogoMimeType, v))
}

// LogoMimeTypeLT applies the LT predicate on the "logoMimeType" field.
func LogoMimeTypeLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldLogoMimeType, v))
}

// LogoMimeTypeLTE applies the LTE predicate on the "logoMimeType" field.
func LogoMimeTypeLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldLogoMimeType, v))
}

// LogoMimeTypeContains applies the Contains predicate on the "logoMimeType" field.
func LogoMimeTypeContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldLogoMimeType, v))
}

// LogoMimeTypeHasPrefix applies the HasPrefix predicate on the "logoMimeType" field.
func LogoMimeTypeHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldLogoMimeType, v))
}

// LogoMimeTypeHasSuffix applies the HasSuffix predicate on the "logoMimeType" field.
func LogoMimeTypeHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldLogoMimeType, v))
}

// LogoMimeTypeIsNil applies the IsNil predicate on the "logoMimeType" field.
func LogoMimeTypeIsNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIsNull(FieldLogoMimeType))
}

// LogoMimeTypeNotNil applies the NotNil predicate on the "logoMimeType" field.
func LogoMimeTypeNotNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotNull(FieldLogoMimeType))
}

// LogoMimeTypeEqualFold applies the EqualFold predicate on the "logoMimeType" field.
func LogoMimeTypeEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldLogoMimeType, v))
}

// LogoMimeTypeContainsFold applies the ContainsFold predicate on the "logoMimeType" field.
func LogoMimeTypeContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldLogoMimeType, v))
}

// BannerEndpointEQ applies the EQ predicate on the "bannerEndpoint" field.
func BannerEndpointEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldBannerEndpoint, v))
}

// BannerEndpointNEQ applies the NEQ predicate on the "bannerEndpoint" field.
func BannerEndpointNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldBannerEndpoint, v))
}

// BannerEndpointIn applies the In predicate on the "bannerEndpoint" field.
func BannerEndpointIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldBannerEndpoint, vs...))
}

// BannerEndpointNotIn applies the NotIn predicate on the "bannerEndpoint" field.
func BannerEndpointNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldBannerEndpoint, vs...))
}

// BannerEndpointGT applies the GT predicate on the "bannerEndpoint" field.
func BannerEndpointGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldBannerEndpoint, v))
}

// BannerEndpointGTE applies the GTE predicate on the "bannerEndpoint" field.
func BannerEndpointGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldBannerEndpoint, v))
}

// BannerEndpointLT applies the LT predicate on the "bannerEndpoint" field.
func BannerEndpointLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldBannerEndpoint, v))
}

// BannerEndpointLTE applies the LTE predicate on the "bannerEndpoint" field.
func BannerEndpointLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldBannerEndpoint, v))
}

// BannerEndpointContains applies the Contains predicate on the "bannerEndpoint" field.
func BannerEndpointContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldBannerEndpoint, v))
}

// BannerEndpointHasPrefix applies the HasPrefix predicate on the "bannerEndpoint" field.
func BannerEndpointHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldBannerEndpoint, v))
}

// BannerEndpointHasSuffix applies the HasSuffix predicate on the "bannerEndpoint" field.
func BannerEndpointHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldBannerEndpoint, v))
}

// BannerEndpointIsNil applies the IsNil predicate on the "bannerEndpoint" field.
func BannerEndpointIsNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIsNull(FieldBannerEndpoint))
}

// BannerEndpointNotNil applies the NotNil predicate on the "bannerEndpoint" field.
func BannerEndpointNotNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotNull(FieldBannerEndpoint))
}

// BannerEndpointEqualFold applies the EqualFold predicate on the "bannerEndpoint" field.
func BannerEndpointEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldBannerEndpoint, v))
}

// BannerEndpointContainsFold applies the ContainsFold predicate on the "bannerEndpoint" field.
func BannerEndpointContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldBannerEndpoint, v))
}

// BannerMimeTypeEQ applies the EQ predicate on the "bannerMimeType" field.
func BannerMimeTypeEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEQ(FieldBannerMimeType, v))
}

// BannerMimeTypeNEQ applies the NEQ predicate on the "bannerMimeType" field.
func BannerMimeTypeNEQ(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNEQ(FieldBannerMimeType, v))
}

// BannerMimeTypeIn applies the In predicate on the "bannerMimeType" field.
func BannerMimeTypeIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIn(FieldBannerMimeType, vs...))
}

// BannerMimeTypeNotIn applies the NotIn predicate on the "bannerMimeType" field.
func BannerMimeTypeNotIn(vs ...string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotIn(FieldBannerMimeType, vs...))
}

// BannerMimeTypeGT applies the GT predicate on the "bannerMimeType" field.
func BannerMimeTypeGT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGT(FieldBannerMimeType, v))
}

// BannerMimeTypeGTE applies the GTE predicate on the "bannerMimeType" field.
func BannerMimeTypeGTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldGTE(FieldBannerMimeType, v))
}

// BannerMimeTypeLT applies the LT predicate on the "bannerMimeType" field.
func BannerMimeTypeLT(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLT(FieldBannerMimeType, v))
}

// BannerMimeTypeLTE applies the LTE predicate on the "bannerMimeType" field.
func BannerMimeTypeLTE(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldLTE(FieldBannerMimeType, v))
}

// BannerMimeTypeContains applies the Contains predicate on the "bannerMimeType" field.
func BannerMimeTypeContains(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContains(FieldBannerMimeType, v))
}

// BannerMimeTypeHasPrefix applies the HasPrefix predicate on the "bannerMimeType" field.
func BannerMimeTypeHasPrefix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasPrefix(FieldBannerMimeType, v))
}

// BannerMimeTypeHasSuffix applies the HasSuffix predicate on the "bannerMimeType" field.
func BannerMimeTypeHasSuffix(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldHasSuffix(FieldBannerMimeType, v))
}

// BannerMimeTypeIsNil applies the IsNil predicate on the "bannerMimeType" field.
func BannerMimeTypeIsNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldIsNull(FieldBannerMimeType))
}

// BannerMimeTypeNotNil applies the NotNil predicate on the "bannerMimeType" field.
func BannerMimeTypeNotNil() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldNotNull(FieldBannerMimeType))
}

// BannerMimeTypeEqualFold applies the EqualFold predicate on the "bannerMimeType" field.
func BannerMimeTypeEqualFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldEqualFold(FieldBannerMimeType, v))
}

// BannerMimeTypeContainsFold applies the ContainsFold predicate on the "bannerMimeType" field.
func BannerMimeTypeContainsFold(v string) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.FieldContainsFold(FieldBannerMimeType, v))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModerators applies the HasEdge predicate on the "moderators" edge.
func HasModerators() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ModeratorsTable, ModeratorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModeratorsWith applies the HasEdge predicate on the "moderators" edge with a given conditions (other predicates).
func HasModeratorsWith(preds ...predicate.User) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		step := newModeratorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdmins applies the HasEdge predicate on the "admins" edge.
func HasAdmins() predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AdminsTable, AdminsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminsWith applies the HasEdge predicate on the "admins" edge with a given conditions (other predicates).
func HasAdminsWith(preds ...predicate.User) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(func(s *sql.Selector) {
		step := newAdminsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.InstanceMetadata) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.InstanceMetadata) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InstanceMetadata) predicate.InstanceMetadata {
	return predicate.InstanceMetadata(sql.NotPredicates(p))
}
