// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/lysand-org/versia-go/ent/servermetadata"
	"github.com/lysand-org/versia-go/ent/user"
	"github.com/lysand-org/versia-go/pkg/lysand"
)

// ServerMetadata is the model entity for the ServerMetadata schema.
type ServerMetadata struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// IsRemote holds the value of the "isRemote" field.
	IsRemote bool `json:"isRemote,omitempty"`
	// URI holds the value of the "uri" field.
	URI string `json:"uri,omitempty"`
	// Extensions holds the value of the "extensions" field.
	Extensions lysand.Extensions `json:"extensions,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// SupportedExtensions holds the value of the "supportedExtensions" field.
	SupportedExtensions []string `json:"supportedExtensions,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServerMetadataQuery when eager-loading is set.
	Edges                    ServerMetadataEdges `json:"edges"`
	server_metadata_follower *uuid.UUID
	server_metadata_followee *uuid.UUID
	selectValues             sql.SelectValues
}

// ServerMetadataEdges holds the relations/edges for other nodes in the graph.
type ServerMetadataEdges struct {
	// Follower holds the value of the follower edge.
	Follower *User `json:"follower,omitempty"`
	// Followee holds the value of the followee edge.
	Followee *User `json:"followee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FollowerOrErr returns the Follower value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerMetadataEdges) FollowerOrErr() (*User, error) {
	if e.Follower != nil {
		return e.Follower, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "follower"}
}

// FolloweeOrErr returns the Followee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServerMetadataEdges) FolloweeOrErr() (*User, error) {
	if e.Followee != nil {
		return e.Followee, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "followee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerMetadata) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case servermetadata.FieldExtensions, servermetadata.FieldSupportedExtensions:
			values[i] = new([]byte)
		case servermetadata.FieldIsRemote:
			values[i] = new(sql.NullBool)
		case servermetadata.FieldURI, servermetadata.FieldName, servermetadata.FieldDescription, servermetadata.FieldVersion:
			values[i] = new(sql.NullString)
		case servermetadata.FieldCreatedAt, servermetadata.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case servermetadata.FieldID:
			values[i] = new(uuid.UUID)
		case servermetadata.ForeignKeys[0]: // server_metadata_follower
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case servermetadata.ForeignKeys[1]: // server_metadata_followee
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerMetadata fields.
func (sm *ServerMetadata) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case servermetadata.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sm.ID = *value
			}
		case servermetadata.FieldIsRemote:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isRemote", values[i])
			} else if value.Valid {
				sm.IsRemote = value.Bool
			}
		case servermetadata.FieldURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uri", values[i])
			} else if value.Valid {
				sm.URI = value.String
			}
		case servermetadata.FieldExtensions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field extensions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sm.Extensions); err != nil {
					return fmt.Errorf("unmarshal field extensions: %w", err)
				}
			}
		case servermetadata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sm.CreatedAt = value.Time
			}
		case servermetadata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sm.UpdatedAt = value.Time
			}
		case servermetadata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sm.Name = value.String
			}
		case servermetadata.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sm.Description = new(string)
				*sm.Description = value.String
			}
		case servermetadata.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				sm.Version = value.String
			}
		case servermetadata.FieldSupportedExtensions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field supportedExtensions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sm.SupportedExtensions); err != nil {
					return fmt.Errorf("unmarshal field supportedExtensions: %w", err)
				}
			}
		case servermetadata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field server_metadata_follower", values[i])
			} else if value.Valid {
				sm.server_metadata_follower = new(uuid.UUID)
				*sm.server_metadata_follower = *value.S.(*uuid.UUID)
			}
		case servermetadata.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field server_metadata_followee", values[i])
			} else if value.Valid {
				sm.server_metadata_followee = new(uuid.UUID)
				*sm.server_metadata_followee = *value.S.(*uuid.UUID)
			}
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ServerMetadata.
// This includes values selected through modifiers, order, etc.
func (sm *ServerMetadata) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// QueryFollower queries the "follower" edge of the ServerMetadata entity.
func (sm *ServerMetadata) QueryFollower() *UserQuery {
	return NewServerMetadataClient(sm.config).QueryFollower(sm)
}

// QueryFollowee queries the "followee" edge of the ServerMetadata entity.
func (sm *ServerMetadata) QueryFollowee() *UserQuery {
	return NewServerMetadataClient(sm.config).QueryFollowee(sm)
}

// Update returns a builder for updating this ServerMetadata.
// Note that you need to call ServerMetadata.Unwrap() before calling this method if this ServerMetadata
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *ServerMetadata) Update() *ServerMetadataUpdateOne {
	return NewServerMetadataClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the ServerMetadata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *ServerMetadata) Unwrap() *ServerMetadata {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServerMetadata is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *ServerMetadata) String() string {
	var builder strings.Builder
	builder.WriteString("ServerMetadata(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("isRemote=")
	builder.WriteString(fmt.Sprintf("%v", sm.IsRemote))
	builder.WriteString(", ")
	builder.WriteString("uri=")
	builder.WriteString(sm.URI)
	builder.WriteString(", ")
	builder.WriteString("extensions=")
	builder.WriteString(fmt.Sprintf("%v", sm.Extensions))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sm.Name)
	builder.WriteString(", ")
	if v := sm.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(sm.Version)
	builder.WriteString(", ")
	builder.WriteString("supportedExtensions=")
	builder.WriteString(fmt.Sprintf("%v", sm.SupportedExtensions))
	builder.WriteByte(')')
	return builder.String()
}

// ServerMetadataSlice is a parsable slice of ServerMetadata.
type ServerMetadataSlice []*ServerMetadata
