// Code generated by ent, DO NOT EDIT.

package attachment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lysand-org/versia-go/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldID, id))
}

// IsRemote applies equality check predicate on the "isRemote" field. It's identical to IsRemoteEQ.
func IsRemote(v bool) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldIsRemote, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldURI, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldUpdatedAt, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldDescription, v))
}

// Sha256 applies equality check predicate on the "sha256" field. It's identical to Sha256EQ.
func Sha256(v []byte) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldSha256, v))
}

// Size applies equality check predicate on the "size" field. It's identical to SizeEQ.
func Size(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldSize, v))
}

// Blurhash applies equality check predicate on the "blurhash" field. It's identical to BlurhashEQ.
func Blurhash(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldBlurhash, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldHeight, v))
}

// Width applies equality check predicate on the "width" field. It's identical to WidthEQ.
func Width(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldWidth, v))
}

// Fps applies equality check predicate on the "fps" field. It's identical to FpsEQ.
func Fps(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldFps, v))
}

// MimeType applies equality check predicate on the "mimeType" field. It's identical to MimeTypeEQ.
func MimeType(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldMimeType, v))
}

// IsRemoteEQ applies the EQ predicate on the "isRemote" field.
func IsRemoteEQ(v bool) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldIsRemote, v))
}

// IsRemoteNEQ applies the NEQ predicate on the "isRemote" field.
func IsRemoteNEQ(v bool) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldIsRemote, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasSuffix(FieldURI, v))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContainsFold(FieldURI, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldUpdatedAt, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContainsFold(FieldDescription, v))
}

// Sha256EQ applies the EQ predicate on the "sha256" field.
func Sha256EQ(v []byte) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldSha256, v))
}

// Sha256NEQ applies the NEQ predicate on the "sha256" field.
func Sha256NEQ(v []byte) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldSha256, v))
}

// Sha256In applies the In predicate on the "sha256" field.
func Sha256In(vs ...[]byte) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldSha256, vs...))
}

// Sha256NotIn applies the NotIn predicate on the "sha256" field.
func Sha256NotIn(vs ...[]byte) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldSha256, vs...))
}

// Sha256GT applies the GT predicate on the "sha256" field.
func Sha256GT(v []byte) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldSha256, v))
}

// Sha256GTE applies the GTE predicate on the "sha256" field.
func Sha256GTE(v []byte) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldSha256, v))
}

// Sha256LT applies the LT predicate on the "sha256" field.
func Sha256LT(v []byte) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldSha256, v))
}

// Sha256LTE applies the LTE predicate on the "sha256" field.
func Sha256LTE(v []byte) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldSha256, v))
}

// SizeEQ applies the EQ predicate on the "size" field.
func SizeEQ(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldSize, v))
}

// SizeNEQ applies the NEQ predicate on the "size" field.
func SizeNEQ(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldSize, v))
}

// SizeIn applies the In predicate on the "size" field.
func SizeIn(vs ...int) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldSize, vs...))
}

// SizeNotIn applies the NotIn predicate on the "size" field.
func SizeNotIn(vs ...int) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldSize, vs...))
}

// SizeGT applies the GT predicate on the "size" field.
func SizeGT(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldSize, v))
}

// SizeGTE applies the GTE predicate on the "size" field.
func SizeGTE(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldSize, v))
}

// SizeLT applies the LT predicate on the "size" field.
func SizeLT(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldSize, v))
}

// SizeLTE applies the LTE predicate on the "size" field.
func SizeLTE(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldSize, v))
}

// BlurhashEQ applies the EQ predicate on the "blurhash" field.
func BlurhashEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldBlurhash, v))
}

// BlurhashNEQ applies the NEQ predicate on the "blurhash" field.
func BlurhashNEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldBlurhash, v))
}

// BlurhashIn applies the In predicate on the "blurhash" field.
func BlurhashIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldBlurhash, vs...))
}

// BlurhashNotIn applies the NotIn predicate on the "blurhash" field.
func BlurhashNotIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldBlurhash, vs...))
}

// BlurhashGT applies the GT predicate on the "blurhash" field.
func BlurhashGT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldBlurhash, v))
}

// BlurhashGTE applies the GTE predicate on the "blurhash" field.
func BlurhashGTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldBlurhash, v))
}

// BlurhashLT applies the LT predicate on the "blurhash" field.
func BlurhashLT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldBlurhash, v))
}

// BlurhashLTE applies the LTE predicate on the "blurhash" field.
func BlurhashLTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldBlurhash, v))
}

// BlurhashContains applies the Contains predicate on the "blurhash" field.
func BlurhashContains(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContains(FieldBlurhash, v))
}

// BlurhashHasPrefix applies the HasPrefix predicate on the "blurhash" field.
func BlurhashHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasPrefix(FieldBlurhash, v))
}

// BlurhashHasSuffix applies the HasSuffix predicate on the "blurhash" field.
func BlurhashHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasSuffix(FieldBlurhash, v))
}

// BlurhashIsNil applies the IsNil predicate on the "blurhash" field.
func BlurhashIsNil() predicate.Attachment {
	return predicate.Attachment(sql.FieldIsNull(FieldBlurhash))
}

// BlurhashNotNil applies the NotNil predicate on the "blurhash" field.
func BlurhashNotNil() predicate.Attachment {
	return predicate.Attachment(sql.FieldNotNull(FieldBlurhash))
}

// BlurhashEqualFold applies the EqualFold predicate on the "blurhash" field.
func BlurhashEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEqualFold(FieldBlurhash, v))
}

// BlurhashContainsFold applies the ContainsFold predicate on the "blurhash" field.
func BlurhashContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContainsFold(FieldBlurhash, v))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...int) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...int) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldHeight, v))
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.Attachment {
	return predicate.Attachment(sql.FieldIsNull(FieldHeight))
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.Attachment {
	return predicate.Attachment(sql.FieldNotNull(FieldHeight))
}

// WidthEQ applies the EQ predicate on the "width" field.
func WidthEQ(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldWidth, v))
}

// WidthNEQ applies the NEQ predicate on the "width" field.
func WidthNEQ(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldWidth, v))
}

// WidthIn applies the In predicate on the "width" field.
func WidthIn(vs ...int) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldWidth, vs...))
}

// WidthNotIn applies the NotIn predicate on the "width" field.
func WidthNotIn(vs ...int) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldWidth, vs...))
}

// WidthGT applies the GT predicate on the "width" field.
func WidthGT(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldWidth, v))
}

// WidthGTE applies the GTE predicate on the "width" field.
func WidthGTE(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldWidth, v))
}

// WidthLT applies the LT predicate on the "width" field.
func WidthLT(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldWidth, v))
}

// WidthLTE applies the LTE predicate on the "width" field.
func WidthLTE(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldWidth, v))
}

// WidthIsNil applies the IsNil predicate on the "width" field.
func WidthIsNil() predicate.Attachment {
	return predicate.Attachment(sql.FieldIsNull(FieldWidth))
}

// WidthNotNil applies the NotNil predicate on the "width" field.
func WidthNotNil() predicate.Attachment {
	return predicate.Attachment(sql.FieldNotNull(FieldWidth))
}

// FpsEQ applies the EQ predicate on the "fps" field.
func FpsEQ(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldFps, v))
}

// FpsNEQ applies the NEQ predicate on the "fps" field.
func FpsNEQ(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldFps, v))
}

// FpsIn applies the In predicate on the "fps" field.
func FpsIn(vs ...int) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldFps, vs...))
}

// FpsNotIn applies the NotIn predicate on the "fps" field.
func FpsNotIn(vs ...int) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldFps, vs...))
}

// FpsGT applies the GT predicate on the "fps" field.
func FpsGT(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldFps, v))
}

// FpsGTE applies the GTE predicate on the "fps" field.
func FpsGTE(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldFps, v))
}

// FpsLT applies the LT predicate on the "fps" field.
func FpsLT(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldFps, v))
}

// FpsLTE applies the LTE predicate on the "fps" field.
func FpsLTE(v int) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldFps, v))
}

// FpsIsNil applies the IsNil predicate on the "fps" field.
func FpsIsNil() predicate.Attachment {
	return predicate.Attachment(sql.FieldIsNull(FieldFps))
}

// FpsNotNil applies the NotNil predicate on the "fps" field.
func FpsNotNil() predicate.Attachment {
	return predicate.Attachment(sql.FieldNotNull(FieldFps))
}

// MimeTypeEQ applies the EQ predicate on the "mimeType" field.
func MimeTypeEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEQ(FieldMimeType, v))
}

// MimeTypeNEQ applies the NEQ predicate on the "mimeType" field.
func MimeTypeNEQ(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNEQ(FieldMimeType, v))
}

// MimeTypeIn applies the In predicate on the "mimeType" field.
func MimeTypeIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldIn(FieldMimeType, vs...))
}

// MimeTypeNotIn applies the NotIn predicate on the "mimeType" field.
func MimeTypeNotIn(vs ...string) predicate.Attachment {
	return predicate.Attachment(sql.FieldNotIn(FieldMimeType, vs...))
}

// MimeTypeGT applies the GT predicate on the "mimeType" field.
func MimeTypeGT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGT(FieldMimeType, v))
}

// MimeTypeGTE applies the GTE predicate on the "mimeType" field.
func MimeTypeGTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldGTE(FieldMimeType, v))
}

// MimeTypeLT applies the LT predicate on the "mimeType" field.
func MimeTypeLT(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLT(FieldMimeType, v))
}

// MimeTypeLTE applies the LTE predicate on the "mimeType" field.
func MimeTypeLTE(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldLTE(FieldMimeType, v))
}

// MimeTypeContains applies the Contains predicate on the "mimeType" field.
func MimeTypeContains(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContains(FieldMimeType, v))
}

// MimeTypeHasPrefix applies the HasPrefix predicate on the "mimeType" field.
func MimeTypeHasPrefix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasPrefix(FieldMimeType, v))
}

// MimeTypeHasSuffix applies the HasSuffix predicate on the "mimeType" field.
func MimeTypeHasSuffix(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldHasSuffix(FieldMimeType, v))
}

// MimeTypeEqualFold applies the EqualFold predicate on the "mimeType" field.
func MimeTypeEqualFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldEqualFold(FieldMimeType, v))
}

// MimeTypeContainsFold applies the ContainsFold predicate on the "mimeType" field.
func MimeTypeContainsFold(v string) predicate.Attachment {
	return predicate.Attachment(sql.FieldContainsFold(FieldMimeType, v))
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.User) predicate.Attachment {
	return predicate.Attachment(func(s *sql.Selector) {
		step := newAuthorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Attachment) predicate.Attachment {
	return predicate.Attachment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Attachment) predicate.Attachment {
	return predicate.Attachment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Attachment) predicate.Attachment {
	return predicate.Attachment(sql.NotPredicates(p))
}
